var store = [{
        "title": "GSoC --- First Blog Post",
        "excerpt":"This is my first GSoC blog post, where I talk about what GSoC is, what organization I am working with, and what the software project I am working on actually does.   What is GSoC?   GSoC is short for Google Summer of Code. Here is a quote from the official webpage, which explains the entire thing pretty well:     Google Summer of Code is a global, online program focused on bringing new contributors into open source software development. GSoC Contributors work with an open source organization on a 12+ week programming project under the guidance of mentors.    For more information, check out their webpage.   My GSoC Project   My Organization   In GSoC, there are Contributors and Organizations. The Contributors are individuals like myself who will work on some project, and the Organizations are the people who want these projects to be done.   This year, I was selected to work with CERN-HSF, and my project falls under the purview of the ACTS Project.   What is the ACTS Project?   If we take a look at the README.md, we see that     Acts is an experiment-independent toolkit for (charged) particle track reconstruction in (high energy) physics experiments implemented in modern C++.    But What Does That Mean?   When CERN conducts experiments at the Large Hadron Collider (LHC), the 8 detectors present record certain types of data. The ACTS project is only concerned with the data gathered by the ATLAS detector.        A diagram of the LHC and the 8 detectors. Picture Credits: Wikipedia   What is Track Reconstruction?   One of things mentioned in the ACTS project’s README is track reconstruction. This consists of two parts: First, when a particle interacts with a certain detector geometry, the detector records it for further analysis. Then, the software takes all the gathered points where the particle was known to be at, and recreates the path that the particle must have taken.   How Is This Done?   One thing to keep in mind is that in the real world, we do not (and cannot) have a perfect knowledge of the exact location the particle hit a detector geometry. What we actually have is a location and an error bound, and the software has to take this error bound into account as well.   One of the ways to do this kind of track fitting, is to make use of a statistical technique known as Kalman Filtering.   In the next blog post, I will explain what my work is, and how all this ties into my GSoC project.  ","categories": ["gsoc"],
        "tags": [],
        "url": "/blog/gsoc/gsoc-first-blog-post/",
        "teaser": null
      },{
        "title": "GSoC --- The Details of My Project",
        "excerpt":"In this post, I will discuss what exactly my work is, and how it ties in to the ACTS project. I will also talk about my mentors and what it was like to work with them.   Project Description   The original project description was:     We propose the development of a linear algebra plugin for ACTS, which makes use of explicit vectorization.          Port a similar existing library implementation (fast5x5/xsimd) to a suitable library backend (can be decided upon together with the student).     Adapt the implementation to the linear algebra operations needed in the ACTS numerical integration for particle propagation.     Validate the approach and its performance and possibly optimize the performance further.     Given enough time, find a way to make the implementation available to ACTS as a compute backend and run it in ACTS example code.      The project, as described on the CERN-HSF webpage, can be found here.   Alternate Project Description   The above description might be a little terse for some. This is the way I like to explain it to others:   CERN generates a lot of data from its LHC experiments. For this reason, they have a lot of software projects which are data analysis oriented. The ACTS project is one such software package which does track reconstruction.   However, the people who work on the ACTS project noticed that the matrix libraries they were using were quite slow for small dimensions (like 4×4, 6×6, 6×8, and 8×8). Upon further investigation, it turned out that popular matrix libraries like Eigen and SMatrix are not well-optimized for these dimensions.   Some time ago, an alternate implementation of 4×4 matrices and the related operations were written using a library called Vc, and it performed quite well in benchmarks at the time.   My work is to continue this work and write implemenations for all these desired dimensions, so that the ACTS project’s routines run faster.   I will go more into the details of the work and what we have accomplished so far in the next blog post. For now, I will discuss a bit about our weekly meeting schedule, and what it is like to work with my mentors.   My Project Proposal   My proposal can be found here. The only change I suggested was to use xsimd instead of Vc, because the latter is not in active development anymore.   Where Would The Work Go?   The math code in the ACTS Project proper is inextricably linked with the track-fitting code, so it would be a lot of work to change that.   However, in the ACTS project family, there are two research repositories: detray and traccc. These two repositories were started a couple of years after the original ACTS Project, so their approach to the math code is also slightly different. Both of these projects use another ACTS family project called algebra-plugins as a layer of abstraction over the different functions that matrix libraries like Eigen and SMatrix provide. This allows the developers of these research repositories to easily switch between math backends and test them out.   My work involves fleshing out the Vc portion of algebra-plugins, and adding all the functions which are present in the other math backends but not in the Vc stuff yet.   Weekly Meeting Schedule   We usually meet on Mondays at 10:00 am CEST (1:30 pm IST). Sometimes, we meet on other days, if the day is a holiday in some country, or one of us has other commitments.   Mentors   I have the pleasure of working with 3 highly qualified mentors. I will write a bit about each person:   Joana Nierman   She is currently a PhD student in the University of Göttingen.   She was the first person I contacted, about my interest in working on this project for GSoC, so we have been corresponding since late March of this year. She is quite helpful in general. In our weekly meets, she regularly helps us set the direction for the week, and also helps with gathering more data by running the benchmarks I have written on other machines.   Hadrien Grasland   Hadrien is a software engineer who works for the Centre National de la Recherche Scientifique (CNRS).   His knowledge of the nitty-gritty details of computer architecture and SIMD instruction sets is unparalleled. I am highly grateful to work with him, and I have learned a lot by working on this project with him, and discussing the assembly outputs of the different benchmarks I have written.   In the early stages of the project, he was quite supportive of me adding other matrix library backends to our benchmarks, and seeing how they perform in comparison with Eigen and Fast 5×5.   Paul Gessinger-Befurt   He is the person who knows the most about ACTS project out of all three mentors. When we have any questions about anything related to the ACTS project, he is the person who helps us out.   That’s all for this blog post! In the next one, I will discuss our results so far in detail, and what we plan on doing next.  ","categories": ["gsoc"],
        "tags": [],
        "url": "/blog/gsoc/gsoc-the-details-of-my-project/",
        "teaser": null
      },{
        "title": "GSoC --- The Work So Far",
        "excerpt":"In this blog post, I will discuss the work I have done so far, and what our future direction will be.   Fast 5×5   In 2019, Hadrien worked with a Masters student to create Fast 5×5, which was supposed to be a proof-of-concept demonstrating that the existing matrix routines in Eigen could be better optimized for small dimensions like 5×5.   My Changes to Fast 5×5   The first thing my mentors recommended doing was to take a closer look at the repository and understand where we stand with respect to the work to be done.   After looking at fast5x5.hpp for a while, I decided that I should make some changes to make the benchmarking program faster and more reliable. So, I started making changes to the repository. I started off by removing the Docker stuff because I am not too familiar with it, and because it would not be necessary for the project.   After making a few changes, it became apparent that I needed somewhere to push my changes to, so that it was available for everyone to see and use. However, because the original project was on Gitlab, I could not fork it the way projects on GitHub can be forked. Instead, I pushed my copy of the Gitlab repository onto GitHub, and made sure to point to the original URL in my repository description. The original repository can be found here, and my fork can be found here.   Installed vs. Vendored Libraries   Originally, the repository expected the user to have Eigen and xsimd installed. However, the existing CMakeLists.txt file downloaded Google Test from GitHub, thereby avoiding that library dependency.   In order to minimize library dependencies and make it easier for other people to run the benchmarks, I removed the reliance on user installations and opted to “vendor” the libraries along with the project. Even though both Fast5×5 and algebra-plugins both used CMake to download dependencies from GitHub, I chose the Git submodule approach because I was more familiar with the latter at the time. I added Eigen, xsimd, and GoogleTest as Git sumbodules. Furthermore, all subsequent additions (like Google Benchmark, blaze, and Fastor) were added as submodules to Fast5×5.   /usr/bin/time vs. Google Benchmark   [[ start writing here. finish the /usr/bin/time vs google benchmark thing first. ]]   the benchmarking script used /usr/bin/time to time the code. However, since the code that is being benchmarked runs very fast, a dedicated library like Google Benchmark.   Matrix Generation   A key part of the benchmarking code is the random matrix generation. Doing this properly is essential because otherwise, the compiler might figure out the fact that we have pre-computed matrices. Once it does so, it is free to calculate the results ahead of time, which would defeat the point of the benchmark. The original Fast 5×5 code was using index-based operations to fill up the matrix, like so:   float a[SIZE * SIZE]; float b[SIZE * SIZE];  // the BaseMatrix data type in fast5x5.hpp has a constructor // that takes in C-style arrays. So, the code simply filled // up two arrays and then made two BaseMatrix objects out // of them.  for (int i = 0; i &lt; SIZE; i++) {     for (int j = 0; j &lt; SIZE; j++) {         a[i * SIZE + j] = i + j;     } }  for (int i = 0; i &lt; SIZE; i++) {     for (int j = 0; j &lt; SIZE; j++) {         float val;         if (i == 0 &amp;&amp; j == 1) val = -1;         else if (i == 1 &amp;&amp; j == 0) val = 1;         else if (i &gt; 1 &amp;&amp; i == j &amp;&amp; i % 2) val = -1;         else if (i &gt; 1 &amp;&amp; i == j &amp;&amp; !(i % 2)) val = 1;         else val = 0;         b[i * SIZE + j] = val;     } }  I rewrote the matrix generation code using the random number generators in the &lt;random&gt; header, and mimicked Eigen’s Random() implementation, which generates a random float in the range [-1, 1]:   // random.hpp #include &lt;random&gt; #include &lt;limits&gt;  inline float randomFloat(float min, float max) {     // Returns a random real in [min, max].     static std::uniform_real_distribution&lt;float&gt; distribution(         min, std::nextafter(max,             std::numeric_limits&lt;float&gt;::infinity()             )         );      static std::mt19937_64 generator;      return distribution(generator); }  // this is the matrix generation code float a[SIZE * SIZE];  for (int i = 0; i &lt; SIZE; i++) {     for (int j = 0; j &lt; SIZE; j++) {         a[i * SIZE + j] = randomFloat(-1.0, 1.0);     } }  ","categories": ["gsoc"],
        "tags": [],
        "url": "/blog/gsoc/gsoc-the-work-so-far/",
        "teaser": null
      },{
        "title": "A Small Detail in Naruto Shippuuden: Sealing Jutsu",
        "excerpt":"This post is about a small detail I noticed while telling someone about an amazing scene in the show.      Warning: Spoilers ahead. If you are still watching Naruto Shippuuden, and are at an episode before episode 250, skip this blog post.    The Detail   Whenever anyone in the show performs a Jutsu that results in seal marks being created, they always do it on the ground, and the marks always show up on the ground, or somewhere with a hard surface. The one exception to this rule is Minato Namikaze. His extensive knowledge of Sealing Jutsu allows him to use Jutsu that result in seal marks anywhere (including doing them in the air), and the resultant marks show up in the air.   If you’re wondering where I got this theory from, or why I think it’s true, keep reading!   Naruto’s Parents   We know that Naruto’s parents are Minato Namikaze, of the Namikaze clan, and Kushina Uzumaki, of the Uzumaki clan. When Naruto is trying to tame the nine-tailed fox and he meets his mother, we get to see the whole backstory about the infamous attack on the Hidden Leaf Village 16 years ago.   One of the things Kushina mentions is that the Uzumaki clan was known for their deep knowledge of Sealing Jutsu. She goes on say that Minato spent time with her mother and learned many things about Sealing Jutsu.   Summoning Jutsu   An important class of jutsus in the show are the Summoning Jutsu. As you may recall, these are jutsus used to summon animals, usually for fighting purposes.   An Aside: Uses of Summoned Animals   Not everyone uses the summoned animals for fighting. Jiraiya and Naruto both use their signature summons, toads, for fighting purposes. However, Tsunade and Sakura use their signature summons, the slug (Katsuyu), for healing purposes. Moreover, Kakashi’s summon brings out dogs, which have zero fighting power (against the enemies in the Naruto-verse), and are used for tracking purposes.   So What About These Summons?   One thing you will notice is that whenever people use a summoning jutsu, the summon results in some seal marks being written on the ground:     This little detail stays constant throughout: the marks show up when the Legendary Sannin do a Summoning Jutsu, when Tobi summons the nine tails, and also when Pain does his (their?) summons.   That is to say, the marks are not a result of a “skill issue”. They show up regardless of who is performing the summon.   Minato vs. Nine-Tailed Fox   Think back to when Minato fought the nine tails, and it unleashed a Tailed Beast Bomb at him. What did he do? Since a picture is worth a thousand words, I won’t describe it, but rather show it:     The key thing to note is that the seal marks are being written and drawn in the air itself. In the air. No other ninja in the show ever achieves a similar feat.   How Does Minato Know How To Do It?   Well, it was established before that Minato spent time around his wife’s clan, the Uzumakis, and learned their craft. It would appear that he used the knowledge he learned extensively.   Where Else?   It would be natural to wonder where else he is shown to be using his Sealing Jutsu skills in the show. Here is a small list of the other places where he used them, or his skill with Sealing Jutsu are indirectly demonstrated:           He put his teleporation mark into Kushina’s Jinchuriki seal so that he could teleport to her directly if she was ever in danger.            He unsealed the nine tails from Tobi, freeing it from the Sharingan’s hynoptic gaze, and making it free to be sealed inside a Jinchuriki again.            When he seals the nine tails into Naruto, he makes sure to mix a bit of his and Kushina’s chakra into the seal so that they can appear in his mind at crucial moments and guide him away from the dark path he was going down.            When Naruto meets Kushina, she explains to him that the Tetragram Seal on his abdomen is a seal modeled after jutsu from Uzushiogakure, which is the village where the Uzumaki clan lived.            The seal written on Gerotora is Naruto’s Jinchuriki Seal. The visual we are shown in the anime (and the manga too!) is testament to the sheer complexity of the seal that Minato used. None other than a person highly skilled in the art of Sealing Jutsu could have created such a seal.            Apart from the sheer complexity of Naruto’s seal, we also have to remember that Minato came up with the seal under duress (the village was being attacked). This little detail also indirectly shows Minato’s skill with Sealing Jutsu.       But Wait!   An astute reader/viewer of the series might object to this post by saying that this theory does not hold up against the first time that Naruto summons Gamabunta.   There are two aspects to this objection: First of all, this is a very good point. Naruto was falling into the canyon, so if he succeeded in performing the summoning (which he did), the seal marks would have to have been drawn in the air. One other possibility is that the seal marks were drawn on the ground and Gamabunta ended up being summoned on the ground. After that, he jumped up and caught Naruto in mid-air.   If one watches that episode again, they will notice that there is no evidence that supports either theory over the other. However, the manga has a very interesting visual, wherein no seal marks are drawn at all.      Hence, both the anime adaptation as well as the source material are inconclusive on this topic. That is, it doesn’t prove nor disprove my theory. However, my explanation for this is that because he tapped into his nine-tails chakra in order to summon Gamabunta, so the normal rules don’t apply.   As a final note, recall that Naruto was inside the sand coffin when he summoned Gamabunta in the fight against Gaara, so that instance does nothing to help or hurt this theory either.  ","categories": ["anime","naruto"],
        "tags": [],
        "url": "/blog/anime/naruto/naruto-detail/",
        "teaser": null
      }]
